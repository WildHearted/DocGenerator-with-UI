/// <summary>
		/// This method is used to publish the document to the document collection once it has been created.
		/// </summary>
		/// <returns>Returns True if successfully published else returns False.</returns>
		public bool UploadDocument(
			DesignAndDeliveryPortfolioDataContext parSDDPdatacontext,
			int? parRequestingUserID)
			{
			// Define the "Copy Web Service" Configuration/Settings

			DateTime dtDateTimeStamp = DateTime.Now;

			SDDPwebReference.Copy objCopyService = new SDDPwebReference.Copy();
			objCopyService.Url = Properties.AppResources.SharePointSiteURL + Properties.AppResources.SharePointWEBreference;
			//objCopyService.Credentials = CredentialCache.DefaultCredentials;
			objCopyService.Credentials = new NetworkCredential(
				userName: Properties.AppResources.User_Credentials_UserName,
				password: Properties.AppResources.User_Credentials_Password,
				domain: Properties.AppResources.User_Credentials_Domain);

			// Results - An array of CopyResult objects, passed as an out parameter.
			// Define the array in which the Copy Results will be placed...
			SDDPwebReference.CopyResult objCopyResult1 = new SDDPwebReference.CopyResult();
			SDDPwebReference.CopyResult objCopyResult2 = new SDDPwebReference.CopyResult();
			SDDPwebReference.CopyResult[] objCopyResultArray = { objCopyResult1, objCopyResult2 };

			// Define and set the Document's Properties 
			// Set the Document Title Attribute...
			SDDPwebReference.FieldInformation objFieldInformation_Title = new SDDPwebReference.FieldInformation();
			objFieldInformation_Title.DisplayName = "Title";
			objFieldInformation_Title.InternalName = "Title";
			objFieldInformation_Title.Type = SDDPwebReference.FieldType.Text;
			objFieldInformation_Title.Value = this.FileName.Replace(oldValue: "_", newValue: " ");
			// Set the Document_Collection value...
			// --- first covert the Document Collection ID to a GUID...
			Guid guidDocumentCollectionID = new Guid(string.Format("00000000-0000-0000-0000-00{0:0000000000}", this.DocumentCollectionID));
			// --- Construct the Document_Collection Lookup column...
			Console.WriteLine("\t\t+ guidDocCollectionID: {0}", guidDocumentCollectionID);
			SDDPwebReference.FieldInformation objFieldInformation_DocumentCollection = new SDDPwebReference.FieldInformation();
			objFieldInformation_DocumentCollection.DisplayName = "Document_Collection";
			objFieldInformation_DocumentCollection.InternalName = "Document%5FCollection";
			objFieldInformation_DocumentCollection.Type = SDDPwebReference.FieldType.Integer;
			objFieldInformation_DocumentCollection.Id = guidDocumentCollectionID;
			objFieldInformation_DocumentCollection.Value = this.DocumentCollectionID.ToString();
			//objFieldInformation_DocumentCollection.Value = this.DocumentCollectionTitle;
			// Define the Field Information that need to be added...
			SDDPwebReference.FieldInformation[] objFieldInformationArray = 
				{
				objFieldInformation_Title,
				objFieldInformation_DocumentCollection
				};

			// Source File URL - A String that contains the absolute source URL of the document to be copied.
			string strSourceURL = this.LocalDocumentURI;

			// Destination URLs - An array of Strings that contain one or more absolute URLs specifying the destination 
			// location or locations of the copied document.
			string[] strDestinationURLs = {Properties.AppResources.SharePointURL
				+ Properties.AppResources.List_DocumentLibrary_GeneratedDocuments
				+ "/" + this.FileName };

			// File Stream - An array of Bytes that contain the document to copy using base-64 encoding.
			// Read the document into a File Stream
			FileStream objFileStream = new FileStream(path: this.LocalDocumentURI, mode: FileMode.Open, access: FileAccess.Read);
			byte[] objFileContents = new Byte[objFileStream.Length];
			byte[] objResult = new Byte[objFileStream.Length];
			int intA = objFileStream.Read(array: objFileContents,offset: 0, count: Convert.ToInt32(objFileStream.Length));
			objFileStream.Close();

			
			// ReturnValue - A UInt32 that returns 0 to indicate that the operation has completed.
			uint uintCopyResult = 0U;

			// copy/upload the document from the Source to the Destination with MetaData
			uintCopyResult = objCopyService.CopyIntoItems(
				SourceUrl: strSourceURL,
				DestinationUrls: strDestinationURLs,
				Fields: objFieldInformationArray,
				Stream: objFileContents,
				Results: out objCopyResultArray);

			if(uintCopyResult == 0) // Upload succeeded
				{
				this.URLonSharePoint = Properties.AppResources.SharePointURL
					+ Properties.AppResources.List_DocumentLibrary_GeneratedDocuments
					+ "/" + this.FileName;
				Console.WriteLine("\t + Successfully Uploaded: {0}", this.URLonSharePoint);
				try
					{
					parSDDPdatacontext.MergeOption = MergeOption.OverwriteChanges;
					// Get the document Collection Library item with which to associate the Uploaded document.
					DocumentCollectionLibraryItem objDocumentCollection = (
						from dsDocumentCollection in parSDDPdatacontext.DocumentCollectionLibrary
						where dsDocumentCollection.Id == this.DocumentCollectionID
						select dsDocumentCollection).FirstOrDefault();

					// Get the user item with which to associate the modified by attribute
					UserInformationListItem objRequestingUser = (
						from dsRequestor in parSDDPdatacontext.UserInformationList
						where dsRequestor.Id == Convert.ToInt32(parRequestingUserID)
						select dsRequestor).FirstOrDefault();

					var datasetGeneratedDocuments = parSDDPdatacontext.GeneratedDocuments
					.Expand(gd => gd.Document_Collection)
					.Expand(gd => gd.CreatedBy)
					.Expand(gd => gd.ModifiedBy);

					var rsGeneratedDocuments =
						from dsGeneratedDocs in datasetGeneratedDocuments
						where dsGeneratedDocs.Created >= dtDateTimeStamp
						select dsGeneratedDocs;

					foreach(var entryGeneratedDoc in rsGeneratedDocuments)
						{
						Console.WriteLine("\t + Checking-in Document: {0} - {1}", entryGeneratedDoc.Id, entryGeneratedDoc.Name);
						Console.WriteLine("\t + Created on {0} - {1}", entryGeneratedDoc.Created, entryGeneratedDoc.CreatedBy.Name);
						entryGeneratedDoc.Document_CollectionId = objDocumentCollection.Id;
						entryGeneratedDoc.Modified = DateTime.Now;
						entryGeneratedDoc.ModifiedById = objRequestingUser.Id;
						entryGeneratedDoc.CheckedOutToId = null;
						parSDDPdatacontext.SaveChanges();
						}
					

					//parSDDPdatacontext.MergeOption = MergeOption.NoTracking;
					}
				catch(DataServiceClientException exc)
					{
					Console.WriteLine("\n*** Exception ERROR ***\n{0} - {1}\nStatusCode: {2}\nStackTrace: {3}.", exc.HResult, exc.Message, exc.StatusCode, exc.StackTrace);
					return false;
					}
				catch(DataServiceQueryException exc)
					{
					Console.WriteLine("\n*** Exception ERROR ***\n{0} - {1}\nResponse: {2}\nStackTrace: {3}.", exc.HResult, exc.Message, exc.Response, exc.StackTrace);
					return false;
					}
				catch(DataServiceTransportException exc)
					{
					Console.WriteLine("\n*** Exception ERROR ***\n{0} - {1}\nResponse:{2}\nStackTrace: {3}.", exc.HResult, exc.Message, exc.Response, exc.StackTrace);
					return false;
					}
				catch(System.Net.Sockets.SocketException exc)
					{
					Console.WriteLine("\n*** Exception ERROR ***\n{0} - {1}\nTargetSite:{2}\nStackTrace: {3}.", exc.HResult, exc.Message, exc.TargetSite, exc.StackTrace);
					return false;
					}
				catch(Exception exc)
					{
					Console.WriteLine("\n*** Exception ERROR ***\n{0} - {1}\nSource:{2}\nStackTrace: {3}.", exc.HResult, exc.Message, exc.Source, exc.StackTrace);
					return false;
					}
				return true;
				}
			else // upload failed
				{
				Console.WriteLine("\t - Upload Failed...");
				return false;
				}
			}